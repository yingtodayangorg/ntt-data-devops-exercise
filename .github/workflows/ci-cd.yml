name: CI/CD - NTT Data DevOps API

on:
  push:
    branches: [main, master]
    tags: ["v*.*.*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  TF_WORKING_DIR: ./terraform/deploy
  TF_ENV_FILE: ./terraform/environments/dev.tfvars

permissions:
  contents: read
  id-token: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Lint code
        run: |
          source .venv/bin/activate
          flake8 app tests

      - name: Run unit tests
        run: |
          source .venv/bin/activate
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          pytest --maxfail=1 --disable-warnings --cov=app --cov-report=term-missing

      - name: Extract tag
        id: tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "tag=dev-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        run: |
          echo "Building image nttdevops-flask:${{ steps.tag.outputs.tag }}"
          docker build -t nttdevops-flask:${{ steps.tag.outputs.tag }} .
          docker images | grep nttdevops-flask

  deploy:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    environment: prod
    env:
      IMAGE_TAG: ${{ needs.build-test.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Configure Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "Deploying image tag: ${IMAGE_TAG}"
          terraform apply -auto-approve -var-file=${{ env.TF_ENV_FILE }} -var="image_tag=${IMAGE_TAG}"